:allow-uri-read:
:author: Charles Moulliard (@cmoulliard)
:backend: revealjs
:blog: http://cmoulliard.github.io
:data-uri!:
//:footer_copyright: Powered by http://asciidoctor.org[Asciidoctor], RevealJS and Hyla
//:footer_copyright: Powered by Asciidoctor, Hyla & RevealJS
:footer_copyright: Copyright Â©2014 Red Hat, Inc.
:header_image_path: redhat-logo.jpg
:icons: font
:idprefix:
:imagesdir: images/
:linkattrs:
:linkcss:
:project_dir: /Users/chmoulli/MyProjects/conferences/fuse-days-2014
:resourcesdir: /Users/chmoulli/MyProjects/conferences/fuse-days-2014/slideshow/snippet/src/main/resources
// Themes : default, beige, moon, blood, night, serif, simple, sky, solarized
:revealjs_theme: conference-redhat
:revealjs_vertical_alignment: false
:revealjs_history: true
:sourcesdir: /Users/chmoulli/MyProjects/conferences/fuse-days-2014/slideshow/snippet/src/main/java/
:highlightjs-theme: solarized_light
:stylesdir: /Users/chmoulli/RedHat/GPE/content/hyla/resources/styles
:title-author: {title} {author}
:title-speaker: Architect Engineer Committer
:twitter: cmoulliard

[data-background="images/redhat-mw-logo-background.png"]
//[data-background="images/redhat-logo-background-1024-768.png"]
// [data-background="images/redhat-logo-background-1280-800.png"]
== *Hawtio - Modular web console for managing Java stuff*

[.cover]
--
[.newline]
Red Hat JBoss Fuse Integration Partner Day

[.newline]
{author} +
Principal Solution Architect / Apache Committer - Global Partner Enablement
[.newline]
9th of July - 2014
--
// ************ Hawtio *************

== http://hawt.io[Hawtio]

[cols="85,15"]
|===
| .2+|image:hawtio/hawtio_logo.svg[float="right",width="100%"]
a|* Lightweight & **modular** HTML5 **web console** for managing Java **MBeans** and more ...

[.newline]
* 2 parts :
  ** Front end : HTML5 & AngularJS & **JSON / REST**
  ** Backend : Java Servlet & **jolokia** JMX gateway
|===

[.newline]
* image:web2/html5.jpeg[100,100] +++&nbsp;<i class="fa fa-plus"></i>&nbsp;+++ image:web2/javascript.jpeg[100,100] +++&nbsp;<i class="fa fa-plus"></i>&nbsp;+++ image:hawtio/AngularJS-small.png[] +++&nbsp;<i class="fa fa-plus"></i>&nbsp;+++ image:web2/rest-api.png[100,100] +++&nbsp;<i class="fa fa-plus"></i>&nbsp;+++ image:fuse/jolokia.png[150,150]

// ************ Hawtio *************
== Features

* Can be used (Container *agnostic* !) :
  ** *Standalone* mode
  ** *Embedded* mode
  ** *Deployed* in a *Servlet*, *Application* container
  ** Deployed in an *OSGI* container
* *JAAS* authentication supported
* Offer *local* & *remote* connection (https://jcp.org/en/jsr/detail?id=160[JSR-160])
* Heart of the **new** **F**use **M**anagement **C**onsole

// ************ Hawtio *************
== How it looks

image:hawtio/hawtio-console.png[]

// ************ Hawtio *************
== Demo

[.newline]
* Show hawtio - embedded mode
* Connect remotely using Jolokia agent / JAAS

// ************ Hawtio *************
== Features - con't

* *More* than JConsole
* Config/resources are *Git* manageable
* Includes *Wiki* editors :
   ** Markdown
   ** HTML
   ** XML
   ** Camel Routes
   ** Dozer for Java to Java mapping

// ************ Hawtio *************
== Demo

[.newline]
* How can I use Wiki editor
* Resources managed with GIT repo

// ************ Hawtio *************
== Architecture

* Designed with *AngularJS* framework +++&nbsp<b><font face="Symbol">=</font></b>+++ *Front end* part
  ** JS Model - View - Controller
* *Jolokia* +++&nbsp<b><font face="Symbol">=</font></b>+++ the backend part
  ** Bridge for remote JMX access
* Client communicates through an *agent* over HTTP(S) (GET or POST)
* Request/response *payload* represented in JSON

// ************ Hawtio *************
== Architecture - con't

* JMX MBeans (attributes / operations) belong to a *domain* (Camel, ActiveMQ, OSGI, JVM, ...)
* Managed by a *plugin* +++&nbsp<b><font face="Symbol">=</font></b>+++ collection of UI, REST requests, JS lib to do rendering
* hawtio UI updated in *real time* based on what it can find in the *server side JVM* it connects to

// ************ Hawtio *************
== Demo

* Have a look to Tomcat plugin
* AngularJS part
* Backend - jolokia mbean requests
* Response back

// ************ Hawtio *************
== Example - Tomcat Plugin

image::hawtio/hawtio-tomcat-applications.png[]

// ************ Hawtio *************
== Example - Tomcat MBeans

image::hawtio/hawtio-tomcat-mbeans-applications.png[]

// ************ Hawtio *************
== Example - Front

* HTML, Javascript & Angular

[source, html]
----
<div class="row-fluid" ng-controller="Tomcat.TomcatController"> <!--1-->
  <div class="row-fluid">
    <div class="pull-left">
      <form class="form-inline no-bottom-margin">
        <fieldset>
          <div class="controls control-group inline-block controls-row">
            <div class="btn-group">
              <button ng-disabled="selected.length == 0" class="btn" ng-click="start()" title="Start"><i
                      class="icon-play-circle"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="stop()" title="Stop"><i
                      class="icon-off"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="reload()" title="Refresh"><i
                      class="icon-refresh"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="uninstallDialog.open()" title="Uninstall"><i
                      class="icon-eject"></i></button>
            </div>
          </div>
        </fieldset>
      </form>
----
// * Angular Controller +++<i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-inverse fa-stack-1x">1</i>+++
<1> Angular Controller

// ************ Hawtio *************
== Example - AngularJS mapping

[source, javascript]
----
module Tomcat {
  var pluginName = 'tomcat';
  export var _module = angular.module(pluginName, ['bootstrap', 'ngResource', 'ui.bootstrap.dialog', 'hawtioCore']);

  _module.config(["$routeProvider", ($routeProvider) => {
    $routeProvider.
      when('/tomcat/server', {templateUrl: 'app/tomcat/html/server.html'}).
      when('/tomcat/applications', {templateUrl: 'app/tomcat/html/applications.html'}). <!--1-->
      when('/tomcat/connectors', {templateUrl: 'app/tomcat/html/connectors.html'}). <!--2-->
      when('/tomcat/sessions', {templateUrl: 'app/tomcat/html/sessions.html'});
  }]);
----
<1> Mapping with Applications
<2> Mapping with Connectors

// ************ Hawtio *************
== Example - JSON Request

[source, javascript]
----
jolokia.request({ <!--1-->
        type: 'exec',
        mbean: id,
        operation: op,
        arguments: null
    },
    onSuccess($scope.onResponse, {error: $scope.onResponse}));
----
<1> A typical Jolokia Request

// ************ Hawtio *************
== Example - JSON Search

[source, javascript]
----
function loadData() {
  var connectors = jolokia.search("*:type=Connector,*");
  if (connectors) {
    var found = false;
    angular.forEach(connectors, function (key, value) {
      var mbean = key;
      if (!found) {
        var data = jolokia.request({type: "read", mbean: mbean, attribute: ["port", "scheme", "protocol"]});
...
  jolokia.search("*:j2eeType=WebModule,*", onSuccess(render)); <!--1-->
}
----
<1> Search for mbeans using a search query `"*:j2eeType=WebModule,*"`

// ************ Hawtio *************
== Example - JSON Response

[source, javascript]
----
function render(response) { <!--1-->
   response = Tomcat.filerTomcatOrCatalina(response);

   $scope.webapps = [];
   $scope.mbeanIndex = {};
   $scope.selected.length = 0;

   function onAttributes(response) {
     var obj = response.value;
     if (obj) {
       obj.mbean = response.request.mbean;
       var mbean = obj.mbean;

       // compute the url for the webapp, and we want to use http as scheme
       var hostname = Core.extractTargetUrl($location, $scope.httpScheme, $scope.httpPort);
       obj.url = hostname + obj['path'];
----
<1> Response parsing JSON result +
  and mapping it with angular objects $scope.*

// ************ Hawtio *************
== Design your own Dashboard

* Create your own dashboard
* Add View - Operating System
* Add Donut - Heap Memory
* Add Area Chart - SystemCPU Load
* Add log, threads, ...

// ************ Hawtio *************
== Plugins

* *Plug-an-play* architecture ( > 25 plugins )
* Some are *Packaged* like jvm, threads, dashboard, camel, activemq, ...
* Some are *server side* (git, maven, aether, log) designed
* Some are *external* like insight, elasticsearch, kibana
* *Reusable* for developers (branding, datatable, forms, ide, perspective, tree, ui)

// ************ Hawtio *************
== A plugin - camel

image:fuse/hawtio-3.png[width="75%"]

// ************ Hawtio *************
== Another plugin - ActiveMQ

image:fuse/hawtio-4.png[width="65%",height="65%"]
image:fuse/hawtio-5.png[width="65%",height="65%"]

// ************ Hawtio *************
== Create your own Plugin

* HTML5 + AngularJS Controller + MBeans
* Require to *register* **io.hawt.web.plugin.HawtioPlugin** MBean class
  & parameters
** Context
** JS Scripts location
** Name and domain (used by controller)
* Web project *packaged* as war or bundle

// ************ Hawtio *************
== Plugin

[source, xml]
----
include::{resourcesdir}/OSGI-INF/blueprint/blueprint2.xml[]
----

// ************ Hawtio *************
== Plugin

[cols="60,40"]
|===
a| * Design Front end (AngularJS)
* Send REST request to call Service |
image:hawtio/AngularJS-small.png[float="right"]
|===

[source, javascript]
----
include::{resourcesdir}/socialPlugin.js[tag=snippetController]
----

// ************ Hawtio *************
== Plugin

[source, xml]
----
include::{resourcesdir}/searchtweets.html[]
----

// ************ Hawtio *************
== Plugin

image::fuse/plugin-query.png[]

// ************ Hawtio *************

== What's next

* James's presentation to watch more and more cool & cool demos

// ************ Hawtio *************
== Questions

[cols="45,.<55"]
|===

.2+|image:questions.png[]
a|* Twitter : @cmoulliard
|===

* More info +++&nbsp;<i class="fa fa-arrow-right"></i>&nbsp;+++
  - link:hawt.io[hawt.io]
  - link:www.jboss.org/products/fuse.html[www.jboss.org/products/fuse.html]
  - link:https://github.com/cmoulliard/fuse-days-2014/tree/master/demos/hawtio-embedded[Code of the hawtio embedded demo]