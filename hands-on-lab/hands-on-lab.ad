:toc:
:toc-placement!:
:toclevels: 3
:icons: font

= JBoss Fuse Integration Days - Hands on Lab Session

toc::[]

== Session 1 : Fuse Development - 90min

=== Prerequisites

- http://maven.apache.org/download.cgi[Apache Maven 3.0.5],
- http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html[JDK 7],
- http://sourceforge.net/projects/soapui/files/soapui/[SOAPUi 5.0],
- https://www.jboss.org/products/devstudio.html[JBDS and Integration Stack]

----
Help > Install New Software...
Add...
Insert the following for `Location:` https://devstudio.jboss.com/updates/7.0/integration-stack/
----

Remark : SOAPUI can be also installed within JBDS

- An eclipse update site is now available at http://www.soapui.org/eclipse/update, install the soapui-eclipse-plugin with the following steps:

1. Select Help > Install New Software...
2. In the Work with field, type http://www.soapui.org/eclipse/update and click Add...

- https://www.jboss.org/products/fuse.html[JBoss Fuse 6.1] & https://www.jboss.org/products/amq.html[JBoss A-MQ 6.1]

=== Installation of the code for the demos

* https://github.com/cmoulliard/fuse-days-2014/tree/master/hands-on-lab[GitHub]
* USB key

=== Demos

==== Demo 1 - Using Camel Archetype with JBDS

- Start JBDS 7.1. GA
- Create in your home directory a workspace wih the name `workspace-lab`
- Select `New Fuse Project`
- Next, select an archetype `camel-archetype-activemq`
- Define the following values for :

    groupid : my
    archetypeid : cool-demo
    version : 1.0

- Click on `next` button
- When the project appears, switch to perspective `Fuse integration`
- Open the Camelcontext to navigate between the different camel routes (see menu - `routes`) and review them
- Start the camelContext using `Run as Local Camel Context`
- Open JMX Browser and navigate to discover the ActiveMQ browser and Camel
- Review the MBeans (routes, endpoints, ...)
- Enable tracing
- Drag and drop a message to an endpoint
- Review statistics under Message log

- Create a unit test and run it locally

==== Demo 2 - Import project - Demo Camel CXF with JBDS

- Start JBDS 7.1. GA
- Select the `workspace-lab`
- Import the `demo-camel-ws` project (as a Existing Maven project)
- Compile it using `mvn install` goal
- Change project properties (select in the menu bar -> Project -> Properties)
- Select Java Build Path, Click on Source and add folder `target/generated/src/main/java` to include code created by cxf-codegen-plugin
- Open Fuse integration perspective, review the camel route
- Start the camelContext using `Run as Local Camel Context`
- Open the view `soapUI Navigator` from the menu bar (Show view -> Other -> soapUI -> soapUI Navigator) (DO NOT WORK)
- Start SOAPUI
- Select New project and add the URL point to the WSDL file of the Web Service exposed by the Camel route `http://localhost:9090/training/WebService?wsdl`
- When the project has been imported, select the service `getCustomersByName` and open `Request 1`. Replace the question mark symbol by `edHat`to search about it.
- You will get a response

    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
       <soap:Body>
          <getCustomerByNameResponse xmlns="http://example.fuse.redhat.com/">
             <return>
                <name>RedHat</name>
                <address>RedHat Office</address>
                <numOrders>78</numOrders>
                <revenue>5580.0</revenue>
                <test>100.0</test>
                <type>BUSINESS</type>
             </return>
          </getCustomerByNameResponse>
       </soap:Body>
    </soap:Envelope>

- Test the service `getAllCustomers` and `saveCustomer`
- A request1 example to save a new customer is available under `src/data/request-save` directory

[IMPORTANT]
====
you can also use *curl* to send request and get the result +

curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/getCustomerByName" -T hands-on-lab/demo-camel-ws-after/src/main/resources/data/request.xml  http://localhost:9090/training/WebService | xmllint --format - +

curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/saveCustomerRequest" -T hands-on-lab/demo-camel-ws-after/src/main/resources/data/request-save.xml http://localhost:9090/training/WebService  | xmllint --format - +

curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/getAllCustomers" -T hands-on-lab/demo-camel-ws-after/src/main/resources/data/request-all.xml http://localhost:9090/training/WebService | xmllint --format -
====

==== Demo 3 - Unit Test with JBDS

- Use project created for my cool demo
- Select in the File menu bar `camel test case`
- Package name should be `my.cool.demo`
- Browse to select the camel xml file located under your src/main/resources/META-INF/spring` directory
- Keep by default endpoints selected and click on `finish` button
- Run the unit test using Junit
- Check result

== Session 2 : Packaging and deployment in JBoss Fuse - 90min

=== Presentation of JBoss Fuse & AMQ 6.1

=== Demos

==== Demo 1 - Tailor your JBoss Fuse server

- Edit file `etc/org.apache.karaf.features.cfg` located under /etc directory
- Comment the line starting with the key `featuresBoot` and add the following features

  featuresBoot=jasypt-encryption,config,management,fabric,fabric-bundle,fabric-maven-proxy,patch,war,hawtio

- (Re)Start `fuse` with the command `/fuse clean`
- Check on the console that the number of bundles just correspond to what has been defined
- Was before `250` and now `128`

  ...
  [ 126] [Active     ] [            ] [   60] JLine (2.11.0)
  [ 127] [Active     ] [Created     ] [   60] hawtio :: Karaf terminal plugin (1.2.0.redhat-379)
  [ 128] [Active     ] [Created     ] [   60] hawtio :: hawtio-maven-indexer (1.2.0.redhat-379)

- Add a new `features` like camel, camel-cxf

  features:install camel
  features:install camel-cxf

- Verify bundles deployed

  [ 199] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.0.redhat-610379)
  [ 200] [Active     ] [Created     ] [       ] [   50] camel-cxf-transport (2.12.0.redhat-610379)
  [ 201] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.12.0.redhat-610379)

NOTE: A new Karaf command has been added `cxr`

cxf:list-busses       cxf:list-endpoints    cxf:start-endpoint    cxf:stop-endpoint

==== Demo 2 - Review JBoss Fuse commands

- Type on the keyboard `tab` key -> Display all 311 possibilities? (y or n)
- Answer `yes`
- Type `log:` tab to see the commands belonging to `log` family
- Repeat with `OSGI`,`features`,`admin`,`log` and dicuss with instructor purpose of the command

==== Demo 3 - Transform project into a bundle

- Change pom packaging of the camel cxf demo to bundle

  <packaging>bundle</packaging>

- Add Apache Felix Bundle plugin to generate METADA required by OSGI runtime

  <!-- to generate the MANIFEST-FILE required by the bundle ->
  <plugin>
      <groupId>org.apache.felix</groupId>
      <artifactId>maven-bundle-plugin</artifactId>
      <version>${maven.bundle.plugin.version}</version>
      <extensions>true</extensions> <!-- Used in combination with bundle packaging to extend generate process ->
      <configuration>
          <instructions>
              <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
              <Import-Package>
                  !com.redhat.fuse.example.camel,
                  javax.jws,
                  javax.jws.soap,
                  javax.xml.bind,
                  javax.xml.bind.annotation,
                  javax.xml.datatype,
                  javax.xml.namespace,
                  javax.xml.ws,
                  org.apache.camel;version="[2.10,3)",
                  org.apache.camel.builder;version="[2.10,3)",
                  org.apache.camel.model;version="[2.10,3)",
                  org.apache.cxf.interceptor;version="[2.6,3)",
                  org.apache.cxf.message;version="[2.6,3)",
                  org.slf4j;version="[1.6,2)"
              </Import-Package>
          </instructions>
      </configuration>
  </plugin>

- Build project `mvn clean install`
- Deploy the project on JBoss Fuse

  osgi:install -s mvn:com.redhat.fuse/demo-camel-ws/1.0

- Verify that the bundle is deployed and status equals to `start`
- Verify also that we have a CXF endpoint exposed (web browser -> `http://localhost:9090/training/WebService?wsdl`) but also using cxf command

    cxf:list-endpoints
    Name                      State      Address                                                      BusID
    [CustomerServicePort    ] [Started ] [http://localhost:9090/training/WebService                 ] [demo-camel-ws-cxf1991170407           ]

- Using `soapui`, send a SOAPUI request `getAllCustomers`
- Look to the log file `log:display` or `ld` which is a shortcut

==== Demo 4 - Deploy to a Fuse Container

- Add the JBoss Fuse 6.1 server and deploy folder
- Select `DeployTo` and `Deploy Folder configuration`
- When the screen `Deploy Folders` appear, add the name `jbossfuse6.1`, point to your `deploy` folder

  /Users/chmoulli/Fuse/Fuse-servers/jboss-fuse-6.1.0.redhat-379/deploy

- Description should be the same as `name`
- Add this config and click on `ok` button

- Select from the pom.xml file the option, deploy to -> `jbossfuse6.1`
- mvn build will take place and deploy the jar file created under the `deploy` directory of your server
- List the bundles deployed on the console and consult the log file
- Do you something strange ? Have we missed to deploy something (camel, ...) ?
- Add the missing features

  features:install camel
  features:install camel-cxf

- Restart the bundle of your `cool-demo`

  osgi:restart id_of_the_bundle

- Verify if th web service is working.
- Remove the jar/bundle deployed

  rm -rf ../deploy/demo-camel-ws-1.0.jar

==== Demo 5 - Package the project using a features file

- To achieve this goal, we will create a feature xml file containing our bundle
- Create the file features.xml under src/main/resources/respository directory

  <?xml version="1.0" encoding="UTF-8"?>
  <features name="my-cool-demo-${project.version}"
            xmlns="http://karaf.apache.org/xmlns/features/v1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://karaf.apache.org/xmlns/features/v1.0.0 http://karaf.apache.org/xmlns/features/v1.0.0">

      <feature name="cool-camel-cxf-demo" version="${project.version}">
          <bundle>mvn:com.redhat.fuse/demo-camel-ws/${project.version}</bundle>
      </feature>

   </features>

- Next we will do some maven modifications to add this file during the build process into the maven repository

         <resources>
              <resource>
                  <directory>${project.basedir}/src/main/resources</directory>
                  <filtering>true</filtering>
              </resource>
          </resources>

          <plugins>
              <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>build-helper-maven-plugin</artifactId>
                  <version>1.8</version>
                  <executions>
                      <execution>
                          <id>attach-artifacts</id>
                          <phase>package</phase>
                          <goals>
                              <goal>attach-artifact</goal>
                          </goals>
                          <configuration>
                              <artifacts>
                                  <artifact>
                                      <file>${project.build.outputDirectory}/repository/features.xml</file>
                                      <type>xml</type>
                                      <classifier>features</classifier>
                                  </artifact>
                              </artifacts>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>

- Build the project `mvn clean install`

- Shutdown JBoss Fuse `ctrl-d` and restart it by doing a cleanup `./fuse clean`
- install the features xml file

  features:addurl mvn:com.redhat.fuse/demo-camel-ws/1.0/xml/features

- Check that the file is well installed

  listurl

- Grep the `demo` feature

  features:list | grep -i my-cool
  [uninstalled] [1.0                    ] cool-camel-cxf-demo                     my-cool-demo-1.0

- Install the feature

  features:install cool-camel-cxf-demo

NOTE: Check on the command line the result of that installation process

WARNING: Error executing command: Could not start bundle mvn:com.redhat.fuse/demo-camel-ws/1.0 in feature(s) cool-camel-cxf-demo-1.0: Unresolved constraint in bundle demo-camel-ws [129]: Unable to resolve 129.0: missing requirement [129.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel)(version>=2.10.0)(!(version>=3.0.0)))

- To solve the problem, issue the missing features should be added to the features file
- Edit the file and replace the existing feature defintion by this one

        <feature name="cool-camel-cxf-demo" version="${project.version}">
            <feature version="{camel.version}">camel</feature>
            <feature version="{camel.version}">camel-cxf</feature>
            <bundle>mvn:com.redhat.fuse/demo-camel-ws/${project.version}</bundle>
        </feature>

- Build again `mvn clean install`
- Refresh features definitions using this command on JBoss Fuse

  refreshurl

- Reinstall the project and test it (see previous demo)
- Analyze the camel statistics (command line)

  camel:endpoint-list
  camel:context-list
  camel:route-list

  camel:route-profile route1

- Execute some curl or soapui request, chck the statistics

  camel:route-profile route1

  Profile
  	Camel Context: camel-1
  Id                                  Count    Last (ms)   Delta (ms)    Mean (ms)     Min (ms)     Max (ms)   Total (ms)    Self (ms)
  route1                                 14            1           -1            2            1           11           33            0
    setExchangePattern1                  14            0            0            0            0            0           46            0
    choice1                              14            1           -1            2            1            9           46           29
    log1                                  0            0            0            0            0            0           17            0
    bean1                                 0            0            0            0            0            0           17            0
    log2                                 14            0           -1            0            0            1           17            5
    bean2                                14            1            0            0            0            2           12           12
    log3                                  0            0            0            0            0            0            0            0
    bean3                                 0            0            0            0            0            0            0            0


== Session 3 : Management & Monitoring - 60min

=== Presentation of Fuse Management Console - Hawtio

=== Demos

==== Demo 1 - Use Fuse Management Console / Hawtio

- Open your web browser and point to the following URL address `http://localhost:8181/`
+
NOTE: The login/password `admin/admin` should be commented in the file etc/users.properties prior to start JBoss Fuse
+
- Add you login/password - admin/admin
- Verify that `camel` plugin is there
- Check content of the different plugins `log`, `osgi`, `threads`, `dashboard`
- Discover the camel plugin : route, context, attributes, source, diagram, operations, chart

==== Demo 2 - Trace and Debug camel routes

- Open the camelContext, next the route-1 and click on diagram

  http://localhost:8181/hawtio/index.html#/camel/routes?tab=camel&nid=root-org.apache.camel-demo-camel-ws-routes-%22route1%22

- Send a SOAP Message `saveCustomerRequest, getAllCustomers` and check the counters changing within the route diagram
- Visualize the code source

  http://localhost:8181/hawtio/index.html#/camel/source?tab=camel&nid=root-org.apache.camel-demo-camel-ws-routes-%22route1%22

- Next we will enable the tracing to get more info in the FMC console
- Click on `trace` tab and click on the button `Start tracing`
- Send a new SOAP Request - getAllCustomers
- 3 entries have been created in the table of the tracing. they belong to the same exchangeID
- Click on the the first and next on `header` button, you should see the camel headers, SOAPAction
- Navigate between the different entries, you should see in the diagram that the color change between
  the different processor indicating where you stand
- Stop the tracing (click on the button - stop tracing)

- Now we will use the debug option
- Select `debug` tab and click on the button `start debugging`

  http://localhost:8181/hawtio/index.html#/camel/debugRoute?tab=camel&nid=root-org.apache.camel-demo-camel-ws-routes-%22route1%22

- Click on the choice processor. The color of the processor turns to `yellow` as a breakpoint has been added and is suspended
- Send a SOAPMessage using curl. You should see that the response has not been received

  curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/getAllCustomers" -T hands-on-lab/demo-camel-ws/src/main/resources/data/request-all.xml http://localhost:9090/training/WebService | xmllint --format -
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed


- Return to your browser and look to the table (headers)
- Next click to the button `step into the next node`
- You will move between the different processors
- To finish to process a message, click on the resume button
- To leave the debugger, click on `stop` button


==== Demo 3 - Create a dashboard for your project to monitor specifically a camel route

- Select the `dashboard` plugin and click on the `manage` button
- Click on the `+ create` button to add your camel dashboard, name it `my-camel` in the dashboard table
- Return to your camel plugin
- Select the camel route1

  http://localhost:8181/hawtio/index.html#/camel/profileRoute?tab=camel&nid=root-org.apache.camel-demo-camel-ws-routes-%22route1%22

- Click on the `profile` tab, you will see the statistics of your camel route
- To use this information and add it to your personal dashboard, click on the button `add this view to a dashboard`. This button is located on the panel of your tabs (right part)
- We switch to the dashboard view,
- Select your `my-camel` dashboard by clicking on the checkbox and next Click on `Add view to dashboard`
- When this is done you should be redirected to the dashboadr - `my-camel` and a small widget representing the profile of your camel is displayed
- Increase the size of the widget
- Send new requests and check the values

== Session 4 :  Fabric, HA & Load Balancing - 60min

=== Presentation of Fuse Fabric & A-MQ

=== Demos

==== Demo 1 - Deploy project (my-cool-camel-cxf) as a profile

- Using the JBoss Fuse command line, create the fabric server

  fabric:create

- Add maven plugin `fabric8:deploy` to the pom.xml file the project

- And define the properties required to create the profile

				<fabric8.profile>my-cool-profile</fabric8.profile>
        		<fabric8.features>camel camel-cxf</fabric8.features>
        		<fabric8.parentProfiles>feature-camel</fabric8.parentProfiles>

- Add a new `maven` configuration to JBDS and name it `fabric8`
- Select the `demo-camel-ws` project, add the goal `fabric8:deploy`, save it
+
NOTE: the admin/password login/password must be added to your settings.xml file of your maven config in order to run the plugin.
+
    [ERROR] Please add the following to your ~/.m2/settings.xml file (using the correct user/password values):
    [ERROR]
    [ERROR] <servers>
    [ERROR] <server>
    [ERROR] <id>fabric8.upload.repo</id>
    [ERROR] <username>admin</username>
    [ERROR] <password>admin</password>
    [ERROR] </server>
    [ERROR] </servers>
+
    Example of settings.xml file

   <?xml version="1.0" encoding="UTF-8"?>
   <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
   	<server>
   		<id>fabric8.upload.repo</id>
   		<username>admin</username>
   		<password>admin</password>
   	</server>
   </servers>
   </settings>
+
- Run the `maven` config and wait till the build succeeds

  Uploading: http://192.168.1.4:8181/maven/upload/com/redhat/fuse/demo-camel-ws/1.0/demo-camel-ws-1.0.pom
  [INFO] About to invoke mbean io.fabric8:type=ProjectDeployer on jolokia URL: http://localhost:8181/jolokia with user: admin
  [INFO] Got result: {"profileId":"my-cool-profile","versionId":"1.0"}

- Open the Fuse Management Console. You should see that a new perspective has been added `fabric`, select it
- Review concepts introduced by the instructor
- Select wiki and navigate to the profile `my-cool-demo` to verify that your bundle is well attached to the profile and that the profile is linked to the profile (camel & cxf)

  http://localhost:8181/hawtio/index.html#/wiki/branch/1.0/view/fabric/profiles/my/cool/profile.profile

- Next click on the button `new` to add a new child container with this profile
- Call the container `my-cool-container`
- Verify that the profile is `my-cool-profile`.
- Click on `create and start container`
- You will see that the container will created and the bundles currently deployed


==== Demo 2 - ElasticSearch and Insight

Objective : Install Insight + elasticsearch to collect statistics/metrics of the camel routes.
Play with Full Text Search of ElasticSearch (Lucene) to query some Camel routes (using Message ID)

- Download fabric8 - http://fabric8.io/#/site/book/doc/index.md?chapter=getStarted_md

- Select in the `fabric` perspective, the container `root` runtime and add the profile `insight-core` and `insight-kibana`
- After a few moments, you should be able to verify that the `insight` perspective has been added to the menu
- Create a new child container `my-cool-insight` and add the profile `insight-camel` & `insight-core`
- Wait a few moments that the container is provisioned
- Open next the perspective `insight`, click on `camel events` tab and check the camel exchanges created
- Navigate between the columns of the table of ES
- Add or remove some columns
- Check the detail of a camel exchange
- Search about some exchanges using the Lucene FT Search

==== Demo 3 - HA and Network of brokers

Objective : Setup a Network of Brokers Topology and show how messages are persisted/processed (to support HA scenario)

- We will follow instructions of the FuseByExample/projects to seyup 2 master/slave ActiveMQ brokers in a
  network of brokers (west to east)
* https://github.com/FuseByExample/external-mq-fabric-client
* https://github.com/FuseByExample/external-mq-fabric-client/blob/master/docs/fabric-ha-setup-master-slave.md

==== Demo 4 - Loadbalancing

Objective : Turn on your Fabric/Fuse container into a load balancing platform to distribute workload

- Review the configuration of the cluster server (http://localhost:8181/hawtio/index.html#/wiki/branch/1.0/view/fabric/profiles/example/camel) and the camel route
http://localhost:8181/hawtio/index.html#/wiki/branch/1.0/view/fabric/profiles/example/camel/cluster.server.profile/camel.xml
- Do the same but for the client - http://localhost:8181/hawtio/index.html#/wiki/branch/1.0/view/fabric/profiles/example/camel/cluster.client.profile/camel.xml
- Create 2 child containers using the `cluster server` profile

NOTE: change 1 with 2 in the field `Number of containers` and name the containers `camel-cluster`

- Click on `Create and start containers`
- Verify that the 2 camel child containers are up and running
- Add now a new child container which is a client of the cluster
- Create a child container using the profile `cluster.client` and name the container `camel-client`
- Next connect to the child container and check the log to see that you get response from one the of the two servers

  2014-05-05 17:13:52 INFOfabric-client >>> Response from Fabric Container : camel-cluster1
  2014-05-05 17:13:53 INFOfabric-client >>> Response from Fabric Container : camel-cluster1
  2014-05-05 17:13:54 INFOfabric-client >>> Response from Fabric Container : camel-cluster2
  2014-05-05 17:13:55 INFOfabric-client >>> Response from Fabric Container : camel-cluster1

== Session 5 : Complex Business Processing - 90 min

=== Presentation of Drools Rule Language and Drools plugin in JBoss Developer Studio

=== Demos

==== Demo 1 - Drools & Camel Project

Objective : Discover Drools, Kie and Camel technologies

- Creation of a knowledge project with Rules using JBoss Developer Studio
- Import project 'demo-camel-drools'
- Review the code and build it `mvn install`
- Setup a JBoss Fuse - Fabric server and deploy the Drools project using a profile and fabric8:deploy plugin in a child container `my-cool-drools-container`
- Open the container created and check the log file where you should see messages

    2014-05-06 09:49:51,657 | INFO  | imer://testRoute | Home                             | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Person Young Person is staying home
    2014-05-06 09:50:01,659 | INFO  | imer://testRoute | Bar                              | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Person Old Person can go to the bar

==== Demo 2 - Add new Rule and extand the camel route

- Next we will add a new rule and modify the camel route
- After selecting the 'drl' directory, Select from the menu `New -> Other -> Drools -> Rule Resource`
- file name should be `favoriteCheese-rule.drl`
- Type of resource -> `New rule`
- Define the `Rule package name` to `org.drools.camel.example`
- Click on `next` button
- Add 2 new rules to define favoriteCheese and import the Person object

    package org.drools.camel.example

    import org.drools.camel.example.Person;

    rule "Cheddar cheese for old person"
        when
          p : Person( age >= 21 )
        then
          p.setFavoriteCheese("cheddar");
    end

    rule "Gouda cheese for young person"
        when
          p : Person( age < 21 )
        then
          p.setFavoriteCheese("gouda");
    end

- Modify the camel route to control the `favorite cheese` selected

                <choice>
                    <when id="CanDrink">
                        <simple>${body.canDrink}</simple>
                        <log logName="Bar" message="${body.name} can go to the bar"/>
                        <to uri="direct://cheese"/>
                    </when>
                    <otherwise>
                        <log logName="Home" message="${body.name} is staying home"/>
                        <to uri="direct://cheese"/>
                    </otherwise>
                </choice>
            </route>

            <route>
                <from uri="direct://cheese"/>
                <when>
                    <simple>${body.favoriteCheese} == 'gouda'</simple>
                    <log logName="Gouda" message="${body.name} prefers gouda cheese"/>
                </when>
                <when>
                    <simple>${body.favoriteCheese} == 'cheddar'</simple>
                    <log logName="Cheese" message="${body.name} prefers cheddar cheese"/>
                </when>
            </route>

- Rebuild the project `mvn clean install`
- Update the bundle within the `my-cool-drools-container`
- Verify in the log the messages displayed

    2014-05-06 09:57:36,960 | INFO  | imer://testRoute | Bar                              | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Old Person can go to the bar
    2014-05-06 09:57:36,961 | INFO  | imer://testRoute | Cheese                           | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Old Person prefers cheddar cheese

    2014-05-06 09:57:56,963 | INFO  | imer://testRoute | Home                             | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Young Person is staying home
    2014-05-06 09:57:56,964 | INFO  | imer://testRoute | Gouda                            | rg.apache.camel.util.CamelLogger  176 | 230 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Young Person prefers gouda cheese

== This is the end.

We hope that you have enjoyed and appreciated !