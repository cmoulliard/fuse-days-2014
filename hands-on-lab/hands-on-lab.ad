:toc:
:toc-placement!:

= JBoss Fuse Integration Days - Hands on Lab Session

toc::[]

== Session 1 : Fuse Development - 90min

* Prerequisites

- Apache Maven 3.0.5,
- JDK 6-7,
- http://sourceforge.net/projects/soapui/files/soapui/[SOAPUi 5.0],
- https://www.jboss.org/products/devstudio.html[JBDS and Integration Stack]

----
Help > Install New Software...
Add...
Insert the following for 'Location:' https://devstudio.jboss.com/updates/7.0/integration-stack/
----

Remark : SOAPUI can be also installed within JBDS

- An eclipse update site is now available at http://www.soapui.org/eclipse/update, install the soapui-eclipse-plugin with the following steps:

1. Select Help > Install New Software...
2. In the Work with field, type http://www.soapui.org/eclipse/update and click Add...

- https://www.jboss.org/products/fuse.html[JBoss Fuse 6.1 & JBoss A-MQ 6.1]

* Download and installation of the code for the demos
  - https://github.com/cmoulliard/fuse-days-2014/tree/master/hands-on-lab[GitHub]
  - USB key

* Steps - DEMO1 - Using Archetype

- Start JBDS 7.1. GA
- Create in your home directory a workspace wih the name `workspace-lab`
- Select `New Fuse Project`
- Next, select an archetype `camel-archetype-activemq`
- Define the following values for :
  - groupid : my,
  - archetypeid : cool-demo,
  - version : 1.0
- Click on next button
- When the project appears, switch to perspective 'Fuse integration'
- Open the Camelcontext to navigate between the different camel routes (see menu - `routes) and review them
- Start the camelContext using `Run as Local Camel Context`
- Open JMX Browser and navigate to discover the ActiveMQ browser and Camel
- Review the MBeans (routes, endpoints, ...)
- Enable tracing
- Drag and drop a message to an endpoint
- Review statistics under Message log

- Create a unit test and run it locally

* Steps - DEMO2 - Import project - CXF

- Start JBDS 7.1. GA
- Select the `workspace-lab`
- Import the `demo-camel-ws` project (as a Existing Maven project)
- Compile it using `mvn install` goal
- Change project properties (select in the menu bar --> Project --> Properties)
- Select Java Build Path, Click on Source and add folder 'target/generated/src/main/java' to include code created by cxf-codegen-plugin
- Open Fuse integration perspective, review the camel route
- Start the camelContext using `Run as Local Camel Context`
- Open the view `soapUI Navigator` from the menu bar (Show view --> Other --> soapUI --> soapUI Navigator) (DO NOT WORK)
- Start SOAPUI
- Select New project and add the URL point to the WSDL file of the Web Service exposed by the Camel route `http://localhost:9090/training/WebService?wsdl`
- When the project has been imported, select the service `getCustomersByName` and open `Request 1`. Replace the question mark symbol by `edHat`to search about it.
- You will get a response

    <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
       <soap:Body>
          <getCustomerByNameResponse xmlns="http://example.fuse.redhat.com/">
             <return>
                <name>RedHat</name>
                <address>RedHat Office</address>
                <numOrders>78</numOrders>
                <revenue>5580.0</revenue>
                <test>100.0</test>
                <type>BUSINESS</type>
             </return>
          </getCustomerByNameResponse>
       </soap:Body>
    </soap:Envelope>
- Test the service `getAllCustomers` and `saveCustomer`
- A request1 example to save a new customer is available under `src/data/request-save` directory

Remark : you can also use curl to send request and get the result

curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/getCustomerByName" -T hands-on-lab/demo-camel-ws/src/main/resources/data/request.xml  http://localhost:9090/training/WebService | xmllint --format -
curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/saveCustomerRequest" -T hands-on-lab/demo-camel-ws/src/main/resources/data/request-save.xml http://localhost:9090/training/WebService  | xmllint --format -
curl -X POST -H "SOAPAction: http://example.fuse.redhat.com/getAllCustomers" -T hands-on-lab/demo-camel-ws/src/main/resources/data/request-all.xml http://localhost:9090/training/WebService | xmllint --format -

* Steps - DEMO3 - Unit Test

- Use project created for my cool demo
- Select in the File menu bar `camel test case`
- Package name should be `my.cool.demo`
- Browse to select the camel xml file located under your src/main/resources/META-INF/spring directory
- Keep by default endpoints selected and click on 'finish' button
- Run the unit test using Junit
- Check result


== Session 2 : Packaging and deployment in JBoss Fuse - 90min

- Presentation of JBoss Fuse & AMQ 6.1

* Steps - Demo1 - Cleanup JBoss Fuse

- Edit file 'etc/org.apache.karaf.features.cfg' located under /etc directory
- Comment the line starting with the key 'featruesBoot' and add the following features

  featuresBoot=jasypt-encryption,config,management,fabric,fabric-bundle,fabric-maven-proxy,patch,war,hawtio

- (Re)Start 'fuse' with the command `/fuse clean`
- Check on the console that the number of bundles just correspond to what has been defined
- Was before `250` and now `128`

  ...
  [ 126] [Active     ] [            ] [   60] JLine (2.11.0)
  [ 127] [Active     ] [Created     ] [   60] hawtio :: Karaf terminal plugin (1.2.0.redhat-379)
  [ 128] [Active     ] [Created     ] [   60] hawtio :: hawtio-maven-indexer (1.2.0.redhat-379)

- Add a new 'features' like camel, camel-cxf

  features:install camel
  features:install camel-cxf

- Verify bundles deployed

  [ 199] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.0.redhat-610379)
  [ 200] [Active     ] [Created     ] [       ] [   50] camel-cxf-transport (2.12.0.redhat-610379)
  [ 201] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.12.0.redhat-610379)

Remark : A new Karaf command has been added 'cxr'

cxf:list-busses       cxf:list-endpoints    cxf:start-endpoint    cxf:stop-endpoint

* Steps - Demo2 - Review JBoss Fuse commands

- Type on the keyboard 'tab' key --> Display all 311 possibilities? (y or n)
- Answer 'yes'
- Type 'log:' tab to see the commands belonging to 'log' family
- Repeat with 'OSGI','features','admin','log' and dicuss with instructor purpose of the command

* Steps - Demo 3 - Transform project into a bundle

- Change pom packaging of the camel cxf demo to bundle

  <packaging>bundle</packaging>

- Add Apache Felix Bundle plugin to generate METADA required by OSGI runtime

  <!-- to generate the MANIFEST-FILE required by the bundle -->
  <plugin>
      <groupId>org.apache.felix</groupId>
      <artifactId>maven-bundle-plugin</artifactId>
      <version>${maven.bundle.plugin.version}</version>
      <extensions>true</extensions> <!-- Used in combination with bundle packaging to extend generate process -->
      <configuration>
          <instructions>
              <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
              <Import-Package>
                  !com.redhat.fuse.example.camel,
                  javax.jws,
                  javax.jws.soap,
                  javax.xml.bind,
                  javax.xml.bind.annotation,
                  javax.xml.datatype,
                  javax.xml.namespace,
                  javax.xml.ws,
                  org.apache.camel;version="[2.10,3)",
                  org.apache.camel.builder;version="[2.10,3)",
                  org.apache.camel.model;version="[2.10,3)",
                  org.apache.cxf.interceptor;version="[2.6,3)",
                  org.apache.cxf.message;version="[2.6,3)",
                  org.slf4j;version="[1.6,2)"
              </Import-Package>
          </instructions>
      </configuration>
  </plugin>

- Build project 'mvn clean install'
- Deploy the project on JBoss Fuse

  osgi:install -s mvn:com.redhat.fuse/demo-camel-ws/1.0

- Verify that the bundle is deployed and status equals to 'start'
- Verify also that we have a CXF endpoint exposed (web browser --> 'http://localhost:9090/training/WebService?wsdl') but also using cxf command

    cxf:list-endpoints
    Name                      State      Address                                                      BusID
    [CustomerServicePort    ] [Started ] [http://localhost:9090/training/WebService                 ] [demo-camel-ws-cxf1991170407           ]

- Using 'soapui', send a SOAPUI request 'getAllCustomers'
- Look to the log file 'log:display' or 'ld' which is a shortcut

* Steps - Demo4 - Deploy to

- Add the JBoss Fuse 6.1 server and deploy folder
- Select 'DeployTo' and 'Deploy Folder configuration'
- When the screen 'Deploy Folders' appear, add the name 'jbossfuse6.1', point to your 'deploy' folder

  /Users/chmoulli/Fuse/Fuse-servers/jboss-fuse-6.1.0.redhat-379/deploy

- Description should be the same as 'name'
- Add this config and click on 'ok' button

- Select from the pom.xml file the option, deploy to --> 'jbossfuse6.1'
- mvn build will take place and deploy the jar file created under the 'deploy' directory of your server
- List the bundles deployed on the console and consult the log file
- Do you something strange ? Have we missed to deploy something (camel, ...) ?
- Add the missing features

  features:install camel
  features:install camel-cxf

- Restart the bundle of your 'cool-demo'

  osgi:restart id_of_the_bundle

- Verify if th web service is working.
- Remove the jar/bundle deployed

  rm -rf ../deploy/demo-camel-ws-1.0.jar

* Steps - Demo 5 - Package the project using a features file

- To achieve this goal, we will create a feature xml file containing our bundle
- Create the file features.xml under src/main/resources/respository directory

  <?xml version="1.0" encoding="UTF-8"?>
  <features name="my-cool-demo-${project.version}"
            xmlns="http://karaf.apache.org/xmlns/features/v1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://karaf.apache.org/xmlns/features/v1.0.0 http://karaf.apache.org/xmlns/features/v1.0.0">

      <feature name="cool-camel-cxf-demo" version="${project.version}">
          <bundle>mvn:com.redhat.fuse/demo-camel-ws/${project.version}</bundle>
      </feature>

   </features>

- Next we will do some maven modifications to add this file during the build process into the maven repository

         <resources>
              <resource>
                  <directory>${project.basedir}/src/main/resources</directory>
                  <filtering>true</filtering>
              </resource>
          </resources>

          <plugins>
              <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>build-helper-maven-plugin</artifactId>
                  <version>1.8</version>
                  <executions>
                      <execution>
                          <id>attach-artifacts</id>
                          <phase>package</phase>
                          <goals>
                              <goal>attach-artifact</goal>
                          </goals>
                          <configuration>
                              <artifacts>
                                  <artifact>
                                      <file>${project.build.outputDirectory}/repository/features.xml</file>
                                      <type>xml</type>
                                      <classifier>features</classifier>
                                  </artifact>
                              </artifacts>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>

- Build the project 'mvn clean install'

- Shutdown JBoss Fuse 'ctrl-d' and restart it by doing a cleanup './fuse clean'
- install the features xml file

  features:addurl mvn:com.redhat.fuse/demo-camel-ws/1.0/xml/features

- Check that the file is well installed

  listurl

- Grep the 'demo' feature

  features:list | grep -i my-cool
  [uninstalled] [1.0                    ] cool-camel-cxf-demo                     my-cool-demo-1.0

- Install the feature

  features:install cool-camel-cxf-demo

Remark : Check on the command line the result of that installation process
  Error executing command: Could not start bundle mvn:com.redhat.fuse/demo-camel-ws/1.0 in feature(s) cool-camel-cxf-demo-1.0: Unresolved constraint in bundle demo-camel-ws [129]: Unable to resolve 129.0: missing requirement [129.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel)(version>=2.10.0)(!(version>=3.0.0)))

- To solve the problem, issue the missing features should be added to the features file
- Edit the file and replace the existing feature defintion by this one

        <feature name="cool-camel-cxf-demo" version="${project.version}">
            <feature version="{camel.version}">camel</feature>
            <feature version="{camel.version}">camel-cxf</feature>
            <bundle>mvn:com.redhat.fuse/demo-camel-ws/${project.version}</bundle>
        </feature>

- Build again 'mvn clean install'
- Refresh features definitions using this command on JBoss Fuse

  refreshurl

- Reinstall the project and test it (see previous demo)
- Analyze the camel statistics (command line)

  camel:endpoint-list
  camel:context-list
  camel:route-list

  camel:route-profile route1

- Execute some curl or soapui request, chck the statistics

  camel:route-profile route1

  Profile
  	Camel Context: camel-1
  Id                                  Count    Last (ms)   Delta (ms)    Mean (ms)     Min (ms)     Max (ms)   Total (ms)    Self (ms)
  route1                                 14            1           -1            2            1           11           33            0
    setExchangePattern1                  14            0            0            0            0            0           46            0
    choice1                              14            1           -1            2            1            9           46           29
    log1                                  0            0            0            0            0            0           17            0
    bean1                                 0            0            0            0            0            0           17            0
    log2                                 14            0           -1            0            0            1           17            5
    bean2                                14            1            0            0            0            2           12           12
    log3                                  0            0            0            0            0            0            0            0
    bean3                                 0            0            0            0            0            0            0            0



== Session 3 : Management & Monitoring - 60min

- Presentation of Fuse Management Console - Hawtio

* Steps - DEMO 1 - Use Fuse Management Console / Hawtio

- Open you web browser and point to the following URL address

  http://localhost:8181/

Remark : The login/password 'admin/admin' should be commentted in the file etc/users.propoerties prior to start JBoss Fuse

- Add you login/password - admin/admin
- Verify that 'camel' plugin is there
- Check content of the different plugins 'log', 'osgi', 'threads', 'dashboard'
- Open the camelContext, next the route-1 and click on diagram
- Send a SOAP Message 'saveCustomerRequest, getAllCustomers' and check the counters changing within the route diagram
-


Use hawtio to manage and discover your camel routes, endpoints,
Publish messages to queues, ...

* Steps - Demo 2 :

Create a dashboard for your project to monitor specifically a camel route
Edit a Camel Route and debug
Trace a camel route

* Steps - Demo 3:
Install Insight + elasticsearch to collect statistics/metrics of the camel routes.
Play with Full Text Search of ElasticSearch (Lucene) to query some Camel routes (using Message ID)


== Session 4 :  Fabric, HA & Load Balancing - 60min

- Presentation of Fuse Fabric & A-MQ
- Demo :
Deploy project of scenario 1 using fabric/profile in 2 containers
Setup a Network of Brokers Topology and show how messages are persisted/processed (to support HA scenario)
Turn on your Fabric/Fuse container into a load balancing platform to distribute workload (Web Services)

15:45 - Session 5 : Complex Business Processing - 90 min
- Presentation of Drools Rule Language and Drools plugin in JBoss Developer Studio
- Demo :
Creation of a knowledge project with Rules using JBoss Developer Studio
Add unit testing
Run an debug the project locally
Combine Drools calculation rules within a camel project
Setup a JBoss Fuse - Fabric server and deploy the Drools project using a profile and fabric8:deploy plugin
Review the project, analyze the metrics